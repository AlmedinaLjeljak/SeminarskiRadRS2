// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using xFit.Services.Database;

#nullable disable

namespace xFit.Services.Migrations
{
    [DbContext(typeof(XFitContext))]
    [Migration("20241114203931_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("xFit.Services.Database.Grad", b =>
                {
                    b.Property<int>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Naziv")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.HasKey("GradId");

                    b.ToTable("Grad", (string)null);

                    b.HasData(
                        new
                        {
                            GradId = 1,
                            Naziv = "Mostar"
                        },
                        new
                        {
                            GradId = 2,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            GradId = 3,
                            Naziv = "Beograd"
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.Klijent", b =>
                {
                    b.Property<int>("KlijentId")
                        .HasColumnType("int")
                        .HasColumnName("KlijentID");

                    b.Property<DateTime?>("DatumRodjenja")
                        .HasColumnType("date");

                    b.Property<string>("Ime")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<string>("Prezime")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.HasKey("KlijentId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Klijent", (string)null);

                    b.HasData(
                        new
                        {
                            KlijentId = 1,
                            DatumRodjenja = new DateTime(2024, 11, 14, 21, 39, 31, 706, DateTimeKind.Local).AddTicks(4719),
                            Ime = "Klijent",
                            KorisnikId = 1,
                            Prezime = "Klijent"
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.Korisnik", b =>
                {
                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<DateTime?>("DatumRodjenja")
                        .HasColumnType("date");

                    b.Property<int?>("GradId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Ime")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<string>("KorisnickoIme")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("LozinkaHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<int?>("SpolId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("SpolID");

                    b.HasKey("KorisnikId");

                    b.HasIndex("GradId");

                    b.HasIndex("SpolId");

                    b.ToTable("Korisnik", (string)null);

                    b.HasData(
                        new
                        {
                            KorisnikId = 1,
                            DatumRodjenja = new DateTime(2024, 11, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            GradId = 1,
                            Ime = "Uposlenik",
                            KorisnickoIme = "uposlenik",
                            LozinkaHash = "c0d9c1bf6597d1f8246212f7d4efdc5a5a6b2c394d6fa0ea9c8ff634a1d2bcd2",
                            LozinkaSalt = "3a5c7f12ab8d6e09c2f4a0b7d3e9f6a1",
                            Prezime = "Uposlenik",
                            SpolId = 1
                        },
                        new
                        {
                            KorisnikId = 2,
                            DatumRodjenja = new DateTime(2024, 11, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            GradId = 2,
                            Ime = "Klijent",
                            KorisnickoIme = "klijent",
                            LozinkaHash = "c0d9c1bf6597d1f8246212f7d4efdc5a5a6b2c394d6fa0ea9c8ff634a1d2bcd2",
                            LozinkaSalt = "3a5c7f12ab8d6e09c2f4a0b7d3e9f6a1",
                            Prezime = "Klijent",
                            SpolId = 2
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.KorisnikUloga", b =>
                {
                    b.Property<int>("KorisnikUlogaId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikUlogaID");

                    b.Property<DateTime?>("DatumIzmjene")
                        .HasColumnType("date");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<int?>("UlogaId")
                        .HasColumnType("int")
                        .HasColumnName("UlogaID");

                    b.HasKey("KorisnikUlogaId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisnikUloga", (string)null);

                    b.HasData(
                        new
                        {
                            KorisnikUlogaId = 1,
                            DatumIzmjene = new DateTime(2024, 11, 14, 21, 39, 31, 706, DateTimeKind.Local).AddTicks(4777),
                            KorisnikId = 1,
                            UlogaId = 1
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.Narudzba", b =>
                {
                    b.Property<int>("NarudzbaId")
                        .HasColumnType("int")
                        .HasColumnName("NarudzbaID");

                    b.Property<string>("BrojNarudzbe")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("date");

                    b.Property<double?>("Iznos")
                        .HasColumnType("float");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("NarudzbaId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Narudzba", (string)null);

                    b.HasData(
                        new
                        {
                            NarudzbaId = 1,
                            BrojNarudzbe = "#1",
                            Datum = new DateTime(2024, 11, 14, 21, 39, 31, 706, DateTimeKind.Local).AddTicks(4886),
                            Iznos = 17.0,
                            KorisnikId = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            NarudzbaId = 2,
                            BrojNarudzbe = "#2",
                            Datum = new DateTime(2024, 11, 14, 21, 39, 31, 706, DateTimeKind.Local).AddTicks(4889),
                            Iznos = 20.0,
                            KorisnikId = 2,
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.Novost", b =>
                {
                    b.Property<int>("NovostId")
                        .HasColumnType("int")
                        .HasColumnName("NovostID");

                    b.Property<DateTime?>("DatumObjave")
                        .HasColumnType("date");

                    b.Property<int?>("KlijentId")
                        .HasColumnType("int")
                        .HasColumnName("KlijentID");

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sadzaj")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NovostId");

                    b.HasIndex("KlijentId");

                    b.ToTable("Novost", (string)null);

                    b.HasData(
                        new
                        {
                            NovostId = 1,
                            DatumObjave = new DateTime(2024, 11, 14, 21, 39, 31, 706, DateTimeKind.Local).AddTicks(4860),
                            KlijentId = 1,
                            Naziv = "Novost",
                            Sadzaj = "Sadrzaj novost"
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.OmiljeniProizvod", b =>
                {
                    b.Property<int>("OmiljeniProizvodId")
                        .HasColumnType("int")
                        .HasColumnName("OmiljeniProizvodID");

                    b.Property<DateTime?>("DatumDodavanja")
                        .HasColumnType("date");

                    b.Property<int?>("KlijentId")
                        .HasColumnType("int")
                        .HasColumnName("KlijentID");

                    b.Property<int?>("ProizvodId")
                        .HasColumnType("int")
                        .HasColumnName("ProizvodID");

                    b.HasKey("OmiljeniProizvodId");

                    b.HasIndex("KlijentId");

                    b.HasIndex("ProizvodId");

                    b.ToTable("OmiljeniProizvod", (string)null);

                    b.HasData(
                        new
                        {
                            OmiljeniProizvodId = 1,
                            DatumDodavanja = new DateTime(2024, 11, 14, 21, 39, 31, 706, DateTimeKind.Local).AddTicks(4874),
                            KlijentId = 1,
                            ProizvodId = 1
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.Proizvod", b =>
                {
                    b.Property<int>("ProizvodId")
                        .HasColumnType("int")
                        .HasColumnName("ProizvodID");

                    b.Property<decimal?>("Cijena")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Naziv")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<string>("Sifra")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<byte[]>("Slika")
                        .HasColumnType("image");

                    b.Property<string>("StateMachine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VrstaProizvodaId")
                        .HasColumnType("int")
                        .HasColumnName("VrstaProizvodaID");

                    b.HasKey("ProizvodId");

                    b.HasIndex("VrstaProizvodaId");

                    b.ToTable("Proizvod", (string)null);

                    b.HasData(
                        new
                        {
                            ProizvodId = 1,
                            Cijena = 20m,
                            Naziv = "Rukavice",
                            Sifra = "TR585",
                            StateMachine = "active",
                            VrstaProizvodaId = 2
                        },
                        new
                        {
                            ProizvodId = 2,
                            Cijena = 30m,
                            Naziv = "Whey",
                            Sifra = "PL789",
                            StateMachine = "active",
                            VrstaProizvodaId = 1
                        },
                        new
                        {
                            ProizvodId = 3,
                            Cijena = 20m,
                            Naziv = "Trake",
                            Sifra = "RF147",
                            StateMachine = "active",
                            VrstaProizvodaId = 2
                        },
                        new
                        {
                            ProizvodId = 4,
                            Cijena = 50m,
                            Naziv = "Kreatin",
                            Sifra = "CD741",
                            StateMachine = "active",
                            VrstaProizvodaId = 1
                        },
                        new
                        {
                            ProizvodId = 5,
                            Cijena = 100m,
                            Naziv = "Sobni bicikl",
                            Sifra = "TM741",
                            StateMachine = "active",
                            VrstaProizvodaId = 2
                        },
                        new
                        {
                            ProizvodId = 6,
                            Cijena = 50m,
                            Naziv = "Traka za trcanje",
                            Sifra = "WE179",
                            StateMachine = "active",
                            VrstaProizvodaId = 2
                        },
                        new
                        {
                            ProizvodId = 7,
                            Cijena = 50m,
                            Naziv = "Steperi",
                            Sifra = "CD741",
                            StateMachine = "active",
                            VrstaProizvodaId = 1
                        },
                        new
                        {
                            ProizvodId = 8,
                            Cijena = 10m,
                            Naziv = "Girje",
                            Sifra = "RE789",
                            StateMachine = "draft",
                            VrstaProizvodaId = 2
                        },
                        new
                        {
                            ProizvodId = 9,
                            Cijena = 50m,
                            Naziv = "Plocasti utezi",
                            Sifra = "QW736",
                            StateMachine = "active",
                            VrstaProizvodaId = 2
                        },
                        new
                        {
                            ProizvodId = 10,
                            Cijena = 20m,
                            Naziv = "Podloga za vjezbanje",
                            Sifra = "QP459",
                            StateMachine = "active",
                            VrstaProizvodaId = 2
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.Recenzija", b =>
                {
                    b.Property<int>("RecenzijaId")
                        .HasColumnType("int")
                        .HasColumnName("RecenzijaID");

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("date");

                    b.Property<int?>("KlijentId")
                        .HasColumnType("int")
                        .HasColumnName("KlijentID");

                    b.Property<int?>("ProizvodId")
                        .HasColumnType("int")
                        .HasColumnName("ProizvodID");

                    b.Property<string>("Sadrzaj")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RecenzijaId");

                    b.HasIndex("KlijentId");

                    b.HasIndex("ProizvodId");

                    b.ToTable("Recenzija", (string)null);

                    b.HasData(
                        new
                        {
                            RecenzijaId = 1,
                            Datum = new DateTime(2024, 11, 14, 21, 39, 31, 706, DateTimeKind.Local).AddTicks(4833),
                            KlijentId = 1,
                            ProizvodId = 1,
                            Sadrzaj = "sadrzaj"
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.Rezervacija", b =>
                {
                    b.Property<int>("RezervacijaId")
                        .HasColumnType("int")
                        .HasColumnName("RezervacijaID");

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("KlijentId")
                        .HasColumnType("int")
                        .HasColumnName("KlijentID");

                    b.Property<int?>("TerminId")
                        .HasColumnType("int")
                        .HasColumnName("TerminID");

                    b.Property<int?>("UposlenikId")
                        .HasColumnType("int")
                        .HasColumnName("UposlenikID");

                    b.HasKey("RezervacijaId");

                    b.HasIndex("KlijentId");

                    b.HasIndex("TerminId");

                    b.HasIndex("UposlenikId");

                    b.ToTable("Rezervacija", (string)null);

                    b.HasData(
                        new
                        {
                            RezervacijaId = 1,
                            Datum = new DateTime(2024, 11, 14, 21, 39, 31, 706, DateTimeKind.Local).AddTicks(4920),
                            Email = "rezervacija@gmail.com",
                            KlijentId = 1,
                            TerminId = 1,
                            UposlenikId = 1
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.Spol", b =>
                {
                    b.Property<int>("SpolId")
                        .HasColumnType("int")
                        .HasColumnName("SpolID");

                    b.Property<string>("Naziv")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("SpolId");

                    b.ToTable("Spol", (string)null);

                    b.HasData(
                        new
                        {
                            SpolId = 1,
                            Naziv = "Male"
                        },
                        new
                        {
                            SpolId = 2,
                            Naziv = "Female"
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.StavkaNarudzbe", b =>
                {
                    b.Property<int>("StavkaNarudzbeId")
                        .HasColumnType("int")
                        .HasColumnName("StavkaNarudzbeID");

                    b.Property<int?>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int?>("NarudzbaId")
                        .HasColumnType("int")
                        .HasColumnName("NarudzbaID");

                    b.Property<int?>("ProizvodId")
                        .HasColumnType("int")
                        .HasColumnName("ProizvodID");

                    b.HasKey("StavkaNarudzbeId");

                    b.HasIndex("NarudzbaId");

                    b.HasIndex("ProizvodId");

                    b.ToTable("StavkaNarudzbe", (string)null);

                    b.HasData(
                        new
                        {
                            StavkaNarudzbeId = 1,
                            Kolicina = 1,
                            NarudzbaId = 1,
                            ProizvodId = 1
                        },
                        new
                        {
                            StavkaNarudzbeId = 2,
                            Kolicina = 1,
                            NarudzbaId = 1,
                            ProizvodId = 3
                        },
                        new
                        {
                            StavkaNarudzbeId = 3,
                            Kolicina = 1,
                            NarudzbaId = 1,
                            ProizvodId = 4
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.Termin", b =>
                {
                    b.Property<int>("TerminId")
                        .HasColumnType("int")
                        .HasColumnName("TerminID");

                    b.Property<DateTime?>("DatumVrijeme")
                        .HasColumnType("datetime");

                    b.HasKey("TerminId");

                    b.ToTable("Termin", (string)null);

                    b.HasData(
                        new
                        {
                            TerminId = 1,
                            DatumVrijeme = new DateTime(2024, 11, 14, 21, 39, 31, 706, DateTimeKind.Local).AddTicks(4845)
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.Transakcija", b =>
                {
                    b.Property<int>("TransakcijaId")
                        .HasColumnType("int")
                        .HasColumnName("TransakcijaID");

                    b.Property<double?>("Iznos")
                        .HasColumnType("float");

                    b.Property<int?>("NarudzbaId")
                        .HasColumnType("int")
                        .HasColumnName("NarudzbaID");

                    b.HasKey("TransakcijaId");

                    b.HasIndex("NarudzbaId");

                    b.ToTable("Transakcija", (string)null);

                    b.HasData(
                        new
                        {
                            TransakcijaId = 1,
                            Iznos = 50.0
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.Uloga", b =>
                {
                    b.Property<int>("UlogaId")
                        .HasColumnType("int")
                        .HasColumnName("UlogaID");

                    b.Property<string>("Naziv")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.HasKey("UlogaId");

                    b.ToTable("Uloga", (string)null);

                    b.HasData(
                        new
                        {
                            UlogaId = 1,
                            Naziv = "uposlenik"
                        },
                        new
                        {
                            UlogaId = 2,
                            Naziv = "klijent"
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.Uposlenik", b =>
                {
                    b.Property<int>("UposlenikId")
                        .HasColumnType("int")
                        .HasColumnName("UposlenikID");

                    b.Property<DateTime?>("DatumRodjenja")
                        .HasColumnType("date");

                    b.Property<string>("Ime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<string>("Prezime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UposlenikId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Uposlenik", (string)null);

                    b.HasData(
                        new
                        {
                            UposlenikId = 1,
                            DatumRodjenja = new DateTime(2024, 11, 14, 21, 39, 31, 706, DateTimeKind.Local).AddTicks(4791),
                            Ime = "uposlenik",
                            KorisnikId = 1,
                            Prezime = "uposlenik"
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.VrstaProizvodum", b =>
                {
                    b.Property<int>("VrstaProizvodaId")
                        .HasColumnType("int")
                        .HasColumnName("VrstaProizvodaID");

                    b.Property<string>("Naziv")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.HasKey("VrstaProizvodaId");

                    b.ToTable("VrstaProizvoda");

                    b.HasData(
                        new
                        {
                            VrstaProizvodaId = 1,
                            Naziv = "Suplementi"
                        },
                        new
                        {
                            VrstaProizvodaId = 2,
                            Naziv = "Oprema"
                        });
                });

            modelBuilder.Entity("xFit.Services.Database.Klijent", b =>
                {
                    b.HasOne("xFit.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Klijents")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Klijent_Korisnik");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("xFit.Services.Database.Korisnik", b =>
                {
                    b.HasOne("xFit.Services.Database.Grad", "Grad")
                        .WithMany("Korisniks")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Korisnik_Grad");

                    b.HasOne("xFit.Services.Database.Spol", "Spol")
                        .WithMany("Korisniks")
                        .HasForeignKey("SpolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Korisnik_Spol");

                    b.Navigation("Grad");

                    b.Navigation("Spol");
                });

            modelBuilder.Entity("xFit.Services.Database.KorisnikUloga", b =>
                {
                    b.HasOne("xFit.Services.Database.Korisnik", "Korisnik")
                        .WithMany("KorisnikUlogas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_KorisnikUloga_Korisnik");

                    b.HasOne("xFit.Services.Database.Uloga", "Uloga")
                        .WithMany("KorisnikUlogas")
                        .HasForeignKey("UlogaId")
                        .HasConstraintName("FK_KorisnikUloga_Uloga");

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("xFit.Services.Database.Narudzba", b =>
                {
                    b.HasOne("xFit.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Narudzbas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Narudzba_Korisnik");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("xFit.Services.Database.Novost", b =>
                {
                    b.HasOne("xFit.Services.Database.Klijent", "Klijent")
                        .WithMany("Novosts")
                        .HasForeignKey("KlijentId")
                        .HasConstraintName("FK_Novost_Klijent");

                    b.Navigation("Klijent");
                });

            modelBuilder.Entity("xFit.Services.Database.OmiljeniProizvod", b =>
                {
                    b.HasOne("xFit.Services.Database.Klijent", "Klijent")
                        .WithMany("OmiljeniProizvods")
                        .HasForeignKey("KlijentId")
                        .HasConstraintName("FK_OmiljeniProizvod_Klijent");

                    b.HasOne("xFit.Services.Database.Proizvod", "Proizvod")
                        .WithMany("OmiljeniProizvods")
                        .HasForeignKey("ProizvodId")
                        .HasConstraintName("FK_OmiljeniProizvod_Proizvod");

                    b.Navigation("Klijent");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("xFit.Services.Database.Proizvod", b =>
                {
                    b.HasOne("xFit.Services.Database.VrstaProizvodum", "VrstaProizvoda")
                        .WithMany("Proizvods")
                        .HasForeignKey("VrstaProizvodaId")
                        .HasConstraintName("FK_Proizvod_VrstaProizvoda");

                    b.Navigation("VrstaProizvoda");
                });

            modelBuilder.Entity("xFit.Services.Database.Recenzija", b =>
                {
                    b.HasOne("xFit.Services.Database.Klijent", "Klijent")
                        .WithMany("Recenzijas")
                        .HasForeignKey("KlijentId")
                        .HasConstraintName("FK_Recenzija_Klijent");

                    b.HasOne("xFit.Services.Database.Proizvod", "Proizvod")
                        .WithMany("Recenzijas")
                        .HasForeignKey("ProizvodId")
                        .HasConstraintName("FK_Recenzija_Proizvod");

                    b.Navigation("Klijent");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("xFit.Services.Database.Rezervacija", b =>
                {
                    b.HasOne("xFit.Services.Database.Klijent", "Klijent")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("KlijentId")
                        .HasConstraintName("FK_Rezervacija_Klijent");

                    b.HasOne("xFit.Services.Database.Termin", "Termin")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("TerminId")
                        .HasConstraintName("FK_Rezervacija_Termin");

                    b.HasOne("xFit.Services.Database.Uposlenik", "Uposlenik")
                        .WithMany("Rezervacijas")
                        .HasForeignKey("UposlenikId")
                        .HasConstraintName("FK_Rezervacija_Uposlenik");

                    b.Navigation("Klijent");

                    b.Navigation("Termin");

                    b.Navigation("Uposlenik");
                });

            modelBuilder.Entity("xFit.Services.Database.StavkaNarudzbe", b =>
                {
                    b.HasOne("xFit.Services.Database.Narudzba", "Narudzba")
                        .WithMany("StavkaNarudzbes")
                        .HasForeignKey("NarudzbaId")
                        .HasConstraintName("FK_StavkaNarudzbe_Narudzba");

                    b.HasOne("xFit.Services.Database.Proizvod", "Proizvod")
                        .WithMany("StavkaNarudzbes")
                        .HasForeignKey("ProizvodId")
                        .HasConstraintName("FK_StavkaNarudzbe_Proizvod");

                    b.Navigation("Narudzba");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("xFit.Services.Database.Transakcija", b =>
                {
                    b.HasOne("xFit.Services.Database.Narudzba", "Narudzba")
                        .WithMany("Transakcijas")
                        .HasForeignKey("NarudzbaId")
                        .HasConstraintName("FK_Transakcija_Narudzba");

                    b.Navigation("Narudzba");
                });

            modelBuilder.Entity("xFit.Services.Database.Uposlenik", b =>
                {
                    b.HasOne("xFit.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Uposleniks")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Uposlenik_Korisnik");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("xFit.Services.Database.Grad", b =>
                {
                    b.Navigation("Korisniks");
                });

            modelBuilder.Entity("xFit.Services.Database.Klijent", b =>
                {
                    b.Navigation("Novosts");

                    b.Navigation("OmiljeniProizvods");

                    b.Navigation("Recenzijas");

                    b.Navigation("Rezervacijas");
                });

            modelBuilder.Entity("xFit.Services.Database.Korisnik", b =>
                {
                    b.Navigation("Klijents");

                    b.Navigation("KorisnikUlogas");

                    b.Navigation("Narudzbas");

                    b.Navigation("Uposleniks");
                });

            modelBuilder.Entity("xFit.Services.Database.Narudzba", b =>
                {
                    b.Navigation("StavkaNarudzbes");

                    b.Navigation("Transakcijas");
                });

            modelBuilder.Entity("xFit.Services.Database.Proizvod", b =>
                {
                    b.Navigation("OmiljeniProizvods");

                    b.Navigation("Recenzijas");

                    b.Navigation("StavkaNarudzbes");
                });

            modelBuilder.Entity("xFit.Services.Database.Spol", b =>
                {
                    b.Navigation("Korisniks");
                });

            modelBuilder.Entity("xFit.Services.Database.Termin", b =>
                {
                    b.Navigation("Rezervacijas");
                });

            modelBuilder.Entity("xFit.Services.Database.Uloga", b =>
                {
                    b.Navigation("KorisnikUlogas");
                });

            modelBuilder.Entity("xFit.Services.Database.Uposlenik", b =>
                {
                    b.Navigation("Rezervacijas");
                });

            modelBuilder.Entity("xFit.Services.Database.VrstaProizvodum", b =>
                {
                    b.Navigation("Proizvods");
                });
#pragma warning restore 612, 618
        }
    }
}
